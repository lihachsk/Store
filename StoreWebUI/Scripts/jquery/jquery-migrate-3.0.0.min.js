(function() {
 
    var matched, browser;
 
// Использовать $.browser не одобряется.
// Подробнее: http://api.$.com/$.browser
// $.uaMatch поддерживается для совместимости   
$.uaMatch = function( ua ) {
        ua = ua.toLowerCase();
 
        var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
            /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
            /(msie) ([\w.]+)/.exec( ua ) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
            [];
 
        return {
            browser: match[ 1 ] || "",
            version: match[ 2 ] || "0"
        };
    };
 
    matched = $.uaMatch( navigator.userAgent );
    browser = {};
 
    if ( matched.browser ) {
        browser[ matched.browser ] = true;
        browser.version = matched.version;
    }
 
// Chrome is Webkit, but Webkit is also Safari.
    if ( browser.chrome ) {
        browser.webkit = true;
    } else if ( browser.webkit ) {
        browser.safari = true;
    }
 
    $.browser = browser;
 
    $.sub = function() {
        function $Sub( selector, context ) {
            return new $Sub.fn.init( selector, context );
        }
        $.extend( true, $Sub, this );
        $Sub.superclass = this;
        $Sub.fn = $Sub.prototype = this();
        $Sub.fn.constructor = $Sub;
        $Sub.sub = this.sub;
        $Sub.fn.init = function init( selector, context ) {
            if ( context && context instanceof $ && !(context instanceof $Sub) ) {
                context = $Sub( context );
            }
 
            return $.fn.init.call( this, selector, context, root$Sub );
        };
        $Sub.fn.init.prototype = $Sub.fn;
        var root$Sub = $Sub(document);
        return $Sub;
    };
 
})();